//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace TestingSilverlightApp.ImageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ImageService.ImageProcessingService")]
    public interface ImageProcessingService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ImageProcessingService/RecognizeFromOcto", ReplyAction="urn:ImageProcessingService/RecognizeFromOctoResponse")]
        System.IAsyncResult BeginRecognizeFromOcto(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, System.AsyncCallback callback, object asyncState);
        
        string EndRecognizeFromOcto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ImageProcessingService/AddToOctoSet", ReplyAction="urn:ImageProcessingService/AddToOctoSetResponse")]
        System.IAsyncResult BeginAddToOctoSet(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, string label, System.AsyncCallback callback, object asyncState);
        
        bool EndAddToOctoSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ImageProcessingService/GetTrainedLabels", ReplyAction="urn:ImageProcessingService/GetTrainedLabelsResponse")]
        System.IAsyncResult BeginGetTrainedLabels(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetTrainedLabels(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ImageProcessingServiceChannel : TestingSilverlightApp.ImageService.ImageProcessingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecognizeFromOctoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecognizeFromOctoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddToOctoSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddToOctoSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrainedLabelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrainedLabelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageProcessingServiceClient : System.ServiceModel.ClientBase<TestingSilverlightApp.ImageService.ImageProcessingService>, TestingSilverlightApp.ImageService.ImageProcessingService {
        
        private BeginOperationDelegate onBeginRecognizeFromOctoDelegate;
        
        private EndOperationDelegate onEndRecognizeFromOctoDelegate;
        
        private System.Threading.SendOrPostCallback onRecognizeFromOctoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddToOctoSetDelegate;
        
        private EndOperationDelegate onEndAddToOctoSetDelegate;
        
        private System.Threading.SendOrPostCallback onAddToOctoSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrainedLabelsDelegate;
        
        private EndOperationDelegate onEndGetTrainedLabelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrainedLabelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ImageProcessingServiceClient() {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageProcessingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RecognizeFromOctoCompletedEventArgs> RecognizeFromOctoCompleted;
        
        public event System.EventHandler<AddToOctoSetCompletedEventArgs> AddToOctoSetCompleted;
        
        public event System.EventHandler<GetTrainedLabelsCompletedEventArgs> GetTrainedLabelsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestingSilverlightApp.ImageService.ImageProcessingService.BeginRecognizeFromOcto(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecognizeFromOcto(pixels, size, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestingSilverlightApp.ImageService.ImageProcessingService.EndRecognizeFromOcto(System.IAsyncResult result) {
            return base.Channel.EndRecognizeFromOcto(result);
        }
        
        private System.IAsyncResult OnBeginRecognizeFromOcto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> pixels = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            int size = ((int)(inValues[1]));
            return ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).BeginRecognizeFromOcto(pixels, size, callback, asyncState);
        }
        
        private object[] OnEndRecognizeFromOcto(System.IAsyncResult result) {
            string retVal = ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).EndRecognizeFromOcto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecognizeFromOctoCompleted(object state) {
            if ((this.RecognizeFromOctoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecognizeFromOctoCompleted(this, new RecognizeFromOctoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecognizeFromOctoAsync(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size) {
            this.RecognizeFromOctoAsync(pixels, size, null);
        }
        
        public void RecognizeFromOctoAsync(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, object userState) {
            if ((this.onBeginRecognizeFromOctoDelegate == null)) {
                this.onBeginRecognizeFromOctoDelegate = new BeginOperationDelegate(this.OnBeginRecognizeFromOcto);
            }
            if ((this.onEndRecognizeFromOctoDelegate == null)) {
                this.onEndRecognizeFromOctoDelegate = new EndOperationDelegate(this.OnEndRecognizeFromOcto);
            }
            if ((this.onRecognizeFromOctoCompletedDelegate == null)) {
                this.onRecognizeFromOctoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecognizeFromOctoCompleted);
            }
            base.InvokeAsync(this.onBeginRecognizeFromOctoDelegate, new object[] {
                        pixels,
                        size}, this.onEndRecognizeFromOctoDelegate, this.onRecognizeFromOctoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestingSilverlightApp.ImageService.ImageProcessingService.BeginAddToOctoSet(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, string label, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddToOctoSet(pixels, size, label, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TestingSilverlightApp.ImageService.ImageProcessingService.EndAddToOctoSet(System.IAsyncResult result) {
            return base.Channel.EndAddToOctoSet(result);
        }
        
        private System.IAsyncResult OnBeginAddToOctoSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> pixels = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            int size = ((int)(inValues[1]));
            string label = ((string)(inValues[2]));
            return ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).BeginAddToOctoSet(pixels, size, label, callback, asyncState);
        }
        
        private object[] OnEndAddToOctoSet(System.IAsyncResult result) {
            bool retVal = ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).EndAddToOctoSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddToOctoSetCompleted(object state) {
            if ((this.AddToOctoSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddToOctoSetCompleted(this, new AddToOctoSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddToOctoSetAsync(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, string label) {
            this.AddToOctoSetAsync(pixels, size, label, null);
        }
        
        public void AddToOctoSetAsync(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, string label, object userState) {
            if ((this.onBeginAddToOctoSetDelegate == null)) {
                this.onBeginAddToOctoSetDelegate = new BeginOperationDelegate(this.OnBeginAddToOctoSet);
            }
            if ((this.onEndAddToOctoSetDelegate == null)) {
                this.onEndAddToOctoSetDelegate = new EndOperationDelegate(this.OnEndAddToOctoSet);
            }
            if ((this.onAddToOctoSetCompletedDelegate == null)) {
                this.onAddToOctoSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddToOctoSetCompleted);
            }
            base.InvokeAsync(this.onBeginAddToOctoSetDelegate, new object[] {
                        pixels,
                        size,
                        label}, this.onEndAddToOctoSetDelegate, this.onAddToOctoSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestingSilverlightApp.ImageService.ImageProcessingService.BeginGetTrainedLabels(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrainedLabels(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> TestingSilverlightApp.ImageService.ImageProcessingService.EndGetTrainedLabels(System.IAsyncResult result) {
            return base.Channel.EndGetTrainedLabels(result);
        }
        
        private System.IAsyncResult OnBeginGetTrainedLabels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).BeginGetTrainedLabels(callback, asyncState);
        }
        
        private object[] OnEndGetTrainedLabels(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((TestingSilverlightApp.ImageService.ImageProcessingService)(this)).EndGetTrainedLabels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrainedLabelsCompleted(object state) {
            if ((this.GetTrainedLabelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrainedLabelsCompleted(this, new GetTrainedLabelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrainedLabelsAsync() {
            this.GetTrainedLabelsAsync(null);
        }
        
        public void GetTrainedLabelsAsync(object userState) {
            if ((this.onBeginGetTrainedLabelsDelegate == null)) {
                this.onBeginGetTrainedLabelsDelegate = new BeginOperationDelegate(this.OnBeginGetTrainedLabels);
            }
            if ((this.onEndGetTrainedLabelsDelegate == null)) {
                this.onEndGetTrainedLabelsDelegate = new EndOperationDelegate(this.OnEndGetTrainedLabels);
            }
            if ((this.onGetTrainedLabelsCompletedDelegate == null)) {
                this.onGetTrainedLabelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrainedLabelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrainedLabelsDelegate, null, this.onEndGetTrainedLabelsDelegate, this.onGetTrainedLabelsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TestingSilverlightApp.ImageService.ImageProcessingService CreateChannel() {
            return new ImageProcessingServiceClientChannel(this);
        }
        
        private class ImageProcessingServiceClientChannel : ChannelBase<TestingSilverlightApp.ImageService.ImageProcessingService>, TestingSilverlightApp.ImageService.ImageProcessingService {
            
            public ImageProcessingServiceClientChannel(System.ServiceModel.ClientBase<TestingSilverlightApp.ImageService.ImageProcessingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRecognizeFromOcto(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pixels;
                _args[1] = size;
                System.IAsyncResult _result = base.BeginInvoke("RecognizeFromOcto", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRecognizeFromOcto(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RecognizeFromOcto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddToOctoSet(System.Collections.ObjectModel.ObservableCollection<int> pixels, int size, string label, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = pixels;
                _args[1] = size;
                _args[2] = label;
                System.IAsyncResult _result = base.BeginInvoke("AddToOctoSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddToOctoSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddToOctoSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrainedLabels(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTrainedLabels", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetTrainedLabels(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetTrainedLabels", _args, result)));
                return _result;
            }
        }
    }
}
